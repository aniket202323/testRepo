/****** Object:  StoredProcedure [dbo].[spRIS_GetEventNumberList]    Script Date: 3/23/2020 6:56:50 PM ******/

-- =============================================
CREATE PROCEDURE [dbo].[spRIS_GetEventNumberList]
	@Product_Id				INT,
	@PU_Id					NVARCHAR(15),
	@EventNumList			NVARCHAR(MAX),
	@TransNum				NVARCHAR(2),
	@MaterialLotStatusId		INT
AS

/*---------------------------------------------------------------------------------------------------------------------
    This stored procedure returns a list of event numbers for a given unit and applied product
  
    Date         Ver/Build   Author              Story/Defect        Remarks
    13-Mar-2020	 001         Unknown                                 Initial Development
    19-Oct-2020  002         Evgeniy Kim         US439546            Added material lot validations
	22-Oct-2020  003		 Evgeniy Kim		 US439546			 Updated error messaging to be generic
	03-Nov-2020	 004		 Evgeniy Kim		 Bug				 Updated to make sure proper event is validated
	04-Nov-2020  005         Evgeniy Kim         Bug                 Updated to make sure var specs are linked to
	                                                                 correct Product_Id
---------------------------------------------------------------------------------------------------------------------
    NOTES: 
    1. @TransNum = 1 Check if provided event num already exists
	2. @TransNum = 2 Validate existing material lot during inspection results
    
    QUESTIONS:
    1. How to ignore tests that are not required? 


---------------------------------------------------------------------------------------------------------------------*/
--EXEC [spRIS_GetEventNumberList_evgeniyTest] 75, 33, '1016_5_SNA', 1

DECLARE @eventListTable TABLE (
    eventNum		NVARCHAR(50)
);

INSERT INTO @eventListTable SELECT * FROM STRING_SPLIT(@EventNumList, ',');

IF (@TransNum IS NULL OR @TransNum = '' OR @TransNum = 0)
BEGIN
	SET @TransNUM = '1';
END

IF (@TransNum = '1')
BEGIN
	DECLARE @foundEventNumList NVARCHAR(MAX);
	DECLARE @existingEvents TABLE (
		Event_Num NVARCHAR(50)
	);

	INSERT INTO @existingEvents
	SELECT DISTINCT [events].Event_Num 
	FROM		[dbo].[Events] [events] WITH(NOLOCK)
	JOIN		@eventListTable T
	ON		T.eventNum = [events].Event_Num
	WHERE	Applied_Product = @Product_Id 
	AND		PU_Id = @PU_Id;

	IF ((SELECT COUNT(*) FROM @existingEvents) > 0)
	BEGIN
		SELECT @foundEventNumList = COALESCE(@foundEventNumList + ',' ,'') + Event_Num FROM @existingEvents
		SELECT	Event_Num,
				'The following material lots already exist [' + @foundEventNumList + '].' AS ErrorMessage,
				'ERR_001' AS ErrorCode
		FROM @existingEvents;
		RETURN;
	END
END

IF (@TransNum = '2')
BEGIN
	DECLARE	@MaterialLotStatus NVARCHAR(25),
			@IsInclusiveFlag NVARCHAR(2),
			@MaterialLotId INT,
			@LotIdentifier NVARCHAR(100);
	
	IF ((SELECT COUNT(*) FROM @eventListTable) > 1)
	BEGIN
		SELECT	eventNum AS Event_Num,
				'Disposition validation request failed.' AS ErrorMessage,
				'ERR_002' AS ErrorCode
		FROM @eventListTable;
		RETURN;
	END

	SELECT @MaterialLotId = Event_Id, @LotIdentifier = Lot_Identifier
	FROM [Events] WITH(NOLOCK) 
	WHERE Event_Num IN (SELECT eventNum FROM @eventListTable)
	AND	Applied_Product = @Product_Id
	AND	PU_Id = @PU_Id;

	IF (@MaterialLotId IS NULL)
	BEGIN
		SELECT	eventNum AS Event_Num,
				'Material lot [' + eventNum + '] does not exist.' AS ErrorMessage,
				'ERR_003' AS ErrorCode
		FROM @eventListTable;
		RETURN;
	END

	SELECT @MaterialLotStatus = ProdStatus_Desc FROM Production_Status WITH(NOLOCK) WHERE ProdStatus_Id = @MaterialLotStatusId;

	IF (@MaterialLotStatus IS NULL)
	BEGIN
		SELECT	@LotIdentifier AS Event_Num,
				'Status with ID [' + CONVERT(NVARCHAR(50), @MaterialLotStatusId) + '] not found.' AS ErrorMessage,
				'ERR_004' AS ErrorCode
		RETURN;
	END

	-- Only perform validation when user tries to accept a lot. 
	IF (LOWER(@MaterialLotStatus) = 'accept')
	BEGIN
		DECLARE @materialLotTests TABLE (
			materialLotId	INT NOT NULL,
			sampleId			INT NOT NULL,
			testId			INT NOT NULL,
			testValue		NVARCHAR(25),
			variableId		INT NOT NULL,
			variableName		NVARCHAR(50),
			dataTypeId		INT,
			dataType			NVARCHAR(50),
			lower_reject		NVARCHAR(25),
			upper_reject		NVARCHAR(25),
			[target]			NVARCHAR(25),
			outOfSpec		BIT DEFAULT 0
		);

		INSERT INTO @materialLotTests (materialLotId, sampleId, testId, testValue, variableId, variableName, dataTypeId)
		SELECT UDE.Event_Id, UDE.UDE_Id, T.Test_Id, T.Result, T.Var_Id, VB.Var_Desc, VB.Data_Type_Id
		FROM		Tests T WITH(NOLOCK)
		JOIN		User_Defined_Events UDE WITH(NOLOCK)
		ON		T.Event_Id = UDE.UDE_Id
		AND		UDE.Event_Id = @MaterialLotId
		JOIN		Variables_Base VB WITH(NOLOCK)
		ON		VB.Var_Id = T.Var_Id
		AND		VB.Var_Desc <> N'AutoGeneratedSample';

		-- Only validate material lots that have generated samples/tests
		IF ((SELECT COUNT(*) FROM @materialLotTests) > 0)
		BEGIN
			-- Delete empty tests
			DELETE FROM @materialLotTests WHERE testValue IS NULL;

			IF ((SELECT COUNT(*) FROM @materialLotTests) = 0)
			BEGIN
				RETURN;
			END

			UPDATE T SET dataType = DT.Data_Type_Desc
			FROM		@materialLotTests T
			JOIN		Data_Type DT WITH(NOLOCK)
			ON		DT.Data_Type_Id = T.dataTypeId;
			
			UPDATE T SET lower_reject = VS.L_Reject,
						 [target] = VS.[Target],
						 upper_reject = VS.U_Reject
			FROM		@materialLotTests T
			JOIN		Var_Specs VS WITH(NOLOCK)
			ON		VS.Var_Id = T.variableId
			AND		VS.Expiration_Date IS NULL
			AND		VS.Prod_Id = @Product_Id;
			
			-- Mark boolean tests as out of spec (target)
			UPDATE	T SET outOfSpec = 1 
			FROM		@materialLotTests T
			WHERE	testValue IS NOT NULL 
			AND		dataType = N'Logical' 
			AND		[target] IS NOT NULL
			AND		testValue <> [target]; 

			-- Retrieve Specification Setting site parameter value
			SET @IsInclusiveFlag = ISNULL((SELECT [Value] FROM Site_Parameters WITH(NOLOCK) WHERE Parm_Id = 13), 1);
			
			IF (@IsInclusiveFlag = 2)
			BEGIN
				-- Mark float tests as out of spec (<=)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Float' 
				AND		lower_reject IS NOT NULL
				AND		CAST(testValue AS FLOAT) <= CAST(lower_reject AS FLOAT);

				-- Mark float tests as out of spec (>=)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Float' 
				AND		upper_reject IS NOT NULL
				AND		CAST(testValue AS FLOAT) >= CAST(upper_reject AS FLOAT);

				-- Mark integer tests as out of spec (<=)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Integer' 
				AND		lower_reject IS NOT NULL
				AND		CAST(testValue AS INT) <= CAST(lower_reject AS INT);

				-- Mark integer tests as out of spec (>=)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Integer' 
				AND		upper_reject IS NOT NULL
				AND		CAST(testValue AS INT) >= CAST(upper_reject AS INT);
			END
			
			IF (@IsInclusiveFlag = 1 OR @IsInclusiveFlag = 0)
			BEGIN
				-- Mark float tests as out of spec (<)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Float' 
				AND		lower_reject IS NOT NULL
				AND		CAST(testValue AS FLOAT) < CAST(lower_reject AS FLOAT);

				-- Mark float tests as out of spec (>)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Float' 
				AND		upper_reject IS NOT NULL
				AND		CAST(testValue AS FLOAT) > CAST(upper_reject AS FLOAT);

				-- Mark integer tests as out of spec (<)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Integer' 
				AND		lower_reject IS NOT NULL
				AND		CAST(testValue AS INT) < CAST(lower_reject AS INT);

				-- Mark integer tests as out of spec (>)
				UPDATE	T SET outOfSpec = 1 
				FROM		@materialLotTests T
				WHERE	testValue IS NOT NULL 
				AND		dataType = N'Integer' 
				AND		upper_reject IS NOT NULL
				AND		CAST(testValue AS INT) > CAST(upper_reject AS INT);
			END

			IF ((SELECT COUNT(*) FROM @materialLotTests WHERE outOfSpec = 1) = 1)
			BEGIN
				SELECT	@LotIdentifier AS Event_Num,
						'Cannot accept a SN/LOT since one quality variable is out of specification.' AS ErrorMessage,
						'ERR_005' AS ErrorCode;
				RETURN;
			END

			IF ((SELECT COUNT(*) FROM @materialLotTests WHERE outOfSpec = 1) > 1)
			BEGIN
				SELECT	@LotIdentifier AS Event_Num,
						'Cannot accept a SN/LOT since multiple quality variables are out of specification.' AS ErrorMessage,
						'ERR_006' AS ErrorCode;
				RETURN;
			END
		END
	END
END